<style>
  body {
    background: url({{ (resources.Get "background/background.png").Permalink }}) no-repeat center top;
    background-size: cover;
    background-attachment: fixed;
  }
</style>

<div id="particles-js"></div>

<script src={{ (resources.Get "background/particles.min.js").Permalink }}></script>
<script>
  particlesJS.load('particles-js', {{ (resources.Get "background/particlesjs-config.json").Permalink }}, function() {
    console.log('particles.js loaded - callback');
  });
</script>

<style>
  #particles-js {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    z-index: -1;
  }
</style>


<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css">
<div id="aplayer"></div>
<script async src="//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"></script>
<script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js"></script>
<!-- 【custom.html】 -->
<script>
    // 获取博客本地资源地址
    const cssPath = {{ (resources.Get "waifu/waifu.css").Permalink }}
    const tipsJsonPath = {{ (resources.Get "waifu/waifu-tips.json").Permalink }}
    // live2d_path 参数建议使用绝对路径
    const live2d_path = "https://fastly.jsdelivr.net/gh/stevenjoezhang/live2d-widget@latest/";

    // 封装异步加载资源的方法
    function loadExternalResource(url, type) {
        return new Promise((resolve, reject) => {
            let tag;
            if (type === "css") {
                tag = document.createElement("link");
                tag.rel = "stylesheet";
                tag.href = url;
            }
            else if (type === "js") {
                tag = document.createElement("script");
                tag.src = url;
            }
            if (tag) {
                tag.onload = () => resolve(url);
                tag.onerror = () => reject(url);
                document.head.appendChild(tag);
            }
        });
    }

    // 加载 waifu.css live2d.min.js waifu-tips.js
    if (screen.width >= 768) {
        Promise.all([
            loadExternalResource(cssPath, "css"),
            loadExternalResource(live2d_path + "live2d.min.js", "js"),
            loadExternalResource(live2d_path + "waifu-tips.js", "js")
        ]).then(() => {
            // 配置选项的具体用法见 README.md
            initWidget({
                waifuPath: tipsJsonPath,
                cdnPath: "https://cdn.jsdelivr.net/gh/SJTDreams/BlogModel@v0.0.1/",
                tools: ["hitokoto", "asteroids", "switch-model", "switch-texture", "photo", "info", "quit"]
            });
            initWaifuMouseEvent();
        });
    }
    function initWaifuMouseEvent() {
        const waifu = document.getElementById("waifu");
        let isDown = false;
        let waifuLeft;
        let mouseLeft;
        let waifuTop;
        let mouseTop;
        // 鼠标点击监听
        waifu.onmousedown = function (e) {
            isDown = true;
            // 记录x轴
            waifuLeft = waifu.offsetLeft;
            mouseLeft = e.clientX;
            // 记录y轴
            waifuTop = waifu.offsetTop;
            mouseTop = e.clientY;
        }
        // 鼠标移动监听
        window.onmousemove = function (e) {
            if (!isDown) {
                return;
            }
            // x轴移动
            let currentLeft = waifuLeft + (e.clientX - mouseLeft);
            if (currentLeft < 0) {
                currentLeft = 0;
            } else if (currentLeft > window.innerWidth - 300) {
                currentLeft = window.innerWidth - 300;
            }
            waifu.style.left = currentLeft  + "px";
            // y轴移动
            let currentTop = waifuTop + (e.clientY - mouseTop);
            if (currentTop < 30) {
                currentTop = 30
            } else if (currentTop > window.innerHeight - 290) {
                currentTop = window.innerHeight - 290
            }
            waifu.style.top = currentTop + "px";
        }
        // 鼠标点击松开监听
        window.onmouseup = function (e) {
            isDown = false;
        }
    }
</script>


<script>
    function showHideView() {
        // 判断是否存在vercount标签
        let viewCounts = document.querySelectorAll("#viewCount");
        if (viewCounts) {
            // 判断是否为文章页
            let article =  document.querySelector(".article-page");
            if (!article) {
                viewCounts.forEach(ele => {
                    ele.style.display = 'none';
                });
            }
        }
    }
    
    showHideView();
</script>

<script>
const staticDir = {{ .Site.Home.Permalink }}
const ap = new APlayer({
    container: document.getElementById('aplayer'),
    lrcType: 3,
    audio: [
        {
            
            name: '冬之钟OST',
            artist: '寿司勇者',
            url: staticDir + '冬之钟.mp3',
            cover: staticDir + 'blacksouls.jpg',
            lrc: staticDir + 'lrc.lrc',
        },
        {
             name: '【Remix】背叛的爱丽丝', // 歌名
             artist: 'MYANSR', // 歌手
             url: 'Alice.mp3', // 歌曲路径
             cover: 'blacksouls.jpg', // 封面路径
             lrc: 'lrc.lrc', // 歌词路径
        },
        {
             name: 'Are You Lost', // 歌名
             artist: 'park bird', // 歌手
             url: 'Are You Lost.mp3', // 歌曲路径
             cover: 'lost.png', // 封面路径
             lrc: 'lrc.lrc', // 歌词路径
        },
        {
             name: 'Be Lost', // 歌名
             artist: '路灰气球z', // 歌手
             url: 'Be Lost.mp3', // 歌曲路径
             cover: 'lost.png', // 封面路径
             lrc: 'lrc.lrc', // 歌词路径
        },
        {
             name: 'INTERNET YAMERO', // 歌名
             artist: 'KOTOKO', // 歌手
             url: '升天.mp3', // 歌曲路径
             cover: 'fly.png', // 封面路径
             lrc: 'lrc.lrc', // 歌词路径
        },
        {
            
            name: '古兰战bgm-blacksoulsII',
            artist: '寿司勇者',
            url: staticDir + '古兰.mp3',
            cover: staticDir + 'blacksouls.jpg',
            lrc: staticDir + 'lrc.lrc',
        },
        {
            
            name: 'BlackSouls2 OST - 狩猎邪龙的沃柏尔',
            artist: '寿司勇者',
            url: staticDir + '邪龙.mp3',
            cover: staticDir + 'blacksouls.jpg',
            lrc: staticDir + 'lrc.lrc',
        },
        {
            
            name: 'BlackSouls2 OST - 地狱王子(安德烈·德·洛德)',
            artist: '寿司勇者',
            url: staticDir + '地狱王子.mp3',
            cover: staticDir + 'blacksouls.jpg',
            lrc: staticDir + 'lrc.lrc',
        },
        {
            
            name: 'BlackSouls2 OST - VS虚无少女梅贝尔 (Update Patch ver.)',
            artist: '寿司勇者',
            url: staticDir + '梅贝尔.mp3',
            cover: staticDir + 'blacksouls.jpg',
            lrc: staticDir + 'lrc.lrc',
        },
        {
            
            name: '【Future House】- Index',
            artist: 'Kirara Magic',
            url: staticDir + 'index.mp3',
            cover: staticDir + 'piara.jpg',
            lrc: staticDir + 'lrc.lrc',
        },
        {
            
            name: '𝕷𝖆𝖘𝖙 𝕯𝖆𝖓𝖈𝖊',
            artist: 'Xomu',
            url: staticDir + 'lastdance.mp3',
            cover: staticDir + 'last dance.jpg',
            lrc: staticDir + 'lrc.lrc',
        },
        {
            
            name: '虹の蝶：Summer Pockets Original SoundTrack',
            artist: 'Key Sounds Label',
            url: staticDir + 'sp.mp3',
            cover: staticDir + 'sp.jpg',
            lrc: staticDir + 'lrc.lrc',
        }
        
    ]
});
window.onbeforeunload = () => {
        // 将播放信息用对象封装，并存入到localStorage中
        const playInfo = {
            index: ap.list.index,
            currentTime: ap.audio.currentTime,
            paused: ap.paused
        };
        localStorage.setItem("playInfo", JSON.stringify(playInfo));
    };
    /**
     * 页面加载后监听
     */
    window.onload = () => {
        // 从localStorage取出播放信息
        const playInfo = JSON.parse(localStorage.getItem("playInfo"));
        if (!playInfo) {
            return;
        }
        // 切换歌曲
        ap.list.switch(playInfo.index);
        // 等待500ms再执行下一步(切换歌曲需要点时间，不能立马调歌曲进度条)
        setTimeout(() => {
            // 调整时长
            ap.seek(playInfo.currentTime);
            // 是否播放
            if (!playInfo.paused) {
                ap.play()
            }
        }, 500);
    };

</script>
<script src="https://cdn.jsdelivr.net/npm/pjax/pjax.min.js"></script>
<script>
	var pjax = new Pjax({
	  selectors: [
	    ".main-container"
	  ]
	})
    pjax._handleResponse = pjax.handleResponse;
    pjax.handleResponse = function(responseText, request, href, options) {
        if (request.responseText.match("<html")) {
            // 将新页面的html字符串解析成DOM对象
            let newDom = new DOMParser().parseFromString(responseText, 'text/html');
            // 获取新页面中body的className，并设置回当前页面
            let bodyClass = newDom.body.className;
            document.body.setAttribute("class", bodyClass)
            // 放行，交给pjax自己处理
            pjax._handleResponse(responseText, request, href, options);
        } else {
            // handle non-HTML response here
        }
    }
    document.addEventListener('pjax:complete', () => {
        // Stack脚本初始化
        window.Stack.init();
    })
</script>

